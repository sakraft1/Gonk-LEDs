#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 10
#define NUMPIXELS      1

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

int delayval = 20;

int brightness = 0;

// Variables will change:
int ledState = LOW;             // ledState used to set the LED

// Generally, you should use "unsigned long" for variables that hold time
// The value will quickly become too large for an int to store
unsigned long previousMillis = 0;        // will store last time LED was updated

void setup()
{
  pinMode(11, OUTPUT);
  pinMode(9, OUTPUT);
  
    pixels.begin(); // This initializes the NeoPixel library.

  
}

void loop()
{
  //digitalWrite(11, HIGH);
  //delay(1000); // Wait for 1000 millisecond(s)
  //digitalWrite(11, LOW);
  //delay(60); // Wait for 60 millisecond(s)
  unsigned long currentMillis = millis();
  
  if (currentMillis - previousMillis >= 1000) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }
    digitalWrite(11, ledState);
  }
  
  for (brightness = 0; brightness <= 255; brightness += 5) {
    analogWrite(9, brightness);
    delay(30); // Wait for 30 millisecond(s)
  }
  for (brightness = 255; brightness >= 0; brightness -= 5) {
    analogWrite(9, brightness);
    delay(30); // Wait for 30 millisecond(s)
  }
  
  for (int color=0; color<255; color++) {
      for (int i=0; i<pixels.numPixels(); i++) {
        pixels.setPixelColor(i, Wheel(color));
       }
    pixels.show();
    delay(delayval);
  }
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
  if(WheelPos < 85) {
   return pixels.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else if(WheelPos < 170) {
    WheelPos -= 85;
   return pixels.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  } else {
   WheelPos -= 170;
   return pixels  .Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  }
}
